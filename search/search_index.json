{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u015eirket-\u00c7al\u0131\u015fan Crud \u0130\u015flemleri","text":"<p>Bu proje, \u015firketlerin ve bu \u015firketlere ait \u00e7al\u0131\u015fanlar\u0131n temel CRUD (Create, Read, Update, Delete) i\u015flemlerini ger\u00e7ekle\u015ftiren bir Java uygulamas\u0131d\u0131r. Uygulama, RESTful API kullan\u0131larak geli\u015ftirilmi\u015ftir ve ili\u015fkisel olmayan bir veritaban\u0131 kullanmaktad\u0131r. Veri taban\u0131 i\u015flemleri, her bir \u00f6\u011fe i\u00e7in benzersiz bir kimlik numaras\u0131 (ID) \u00fczerinden ger\u00e7ekle\u015ftirilmektedir.</p>"},{"location":"#ozellikler","title":"\u00d6zellikler","text":"<ul> <li>\u015eirket Ekleme, G\u00fcncelleme, Silme ve Listeleme</li> <li>\u00c7al\u0131\u015fan Ekleme, G\u00fcncelleme, Silme ve Listeleme</li> <li>\u015eirketlere Ait \u00c7al\u0131\u015fanlar\u0131 Listeleme</li> <li>\u00c7al\u0131\u015fanlar\u0131 \u015eirket \u0130smi ve \u00c7al\u0131\u015fan \u0130smi \u0130le Filtreleme</li> </ul>"},{"location":"baslangic/","title":"Ba\u015flang\u0131\u00e7","text":""},{"location":"baslangic/#proje-klonlanmas","title":"Proje Klonlanmas\u0131","text":"<ul> <li>GitHub'da projenin ana sayfas\u0131na gidin.</li> <li>Sa\u011f \u00fcst k\u00f6\u015fede bulunan \"Code\" butonuna t\u0131klay\u0131n.</li> <li>Orada \u00e7\u0131kan adresi kopyalay\u0131n</li> <li>\u00d6rn: <code>git clone https://github.com/keremturak/TaskQuestion6.git</code></li> </ul>"},{"location":"baslangic/#bagmllklar","title":"Ba\u011f\u0131ml\u0131l\u0131klar","text":"Tech Url 1 springDataMongodb \"org.springframework.boot:spring-boot-starter-data-mongodb:${versions.springBoot}\" 2 Spring Boot Web implementation 'org.springframework.boot:spring-boot-starter-web' 3 Lombok compileOnly 'org.projectlombok:lombok'-----annotationProcessor 'org.projectlombok:lombok' 4 Swagger Ui implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0' 5 Mapstruct implementation 'org.mapstruct:mapstruct:1.5.5.Final' 6 Validator implementation  'org.hibernate.validator:hibernate-validator:8.0.0.Final'"},{"location":"baslangic/#dockerda-mongodb-image-olusturulmas-ve-calstrlmas","title":"Dockerda MongoDB Image Olu\u015fturulmas\u0131 ve \u00c7al\u0131\u015ft\u0131r\u0131lmas\u0131","text":"<p>-<code>docker run -d -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret -p 27017:27017 mongo</code></p>"},{"location":"baslangic/#applicationyaml-duzenlenmesi","title":"Application.yaml d\u00fczenlenmesi","text":"<ul> <li>Proje <code>9090</code> serverinda aya\u011fa kalkmaktad\u0131r.</li> <li>MongoDB kullan\u0131lm\u0131\u015ft\u0131r ve Yap\u0131land\u0131r\u0131lmalar\u0131n\u0131n eklenmesi gerekmektedir.</li> </ul> <pre><code>server:\n  port: 9090\n\nspring:\n  data:\n    mongodb:\n      host: localhost\n      port: 27017\n      database: taskquestion6\n      username: ${MONGO_USER}\n      password: ${MONGO_PASS}\n</code></pre> <ul> <li>\u00d6ncelikle Ortam de\u011fi\u015fkenleri a\u00e7\u0131lmal\u0131.</li> <li>Ortam de\u011fi\u015fkenlerine kullan\u0131c\u0131 ad\u0131 ve \u015fifre k\u0131s\u0131mlar\u0131 eklenmeli.</li> </ul> <ul> <li>MongDB ye taskquestion6 tablosu olu\u015fturulmal\u0131 ve bu tabloda <code>username: ${MONGO_USER}</code>, <code>password: ${MONGO_PASS}</code> yetkilendirilmeli.</li> <li>\u00f6rnek;</li> </ul>"},{"location":"baslangic/#tech-stack","title":"Tech Stack","text":"<p>Server: Java, SwaggerSpringBoot, Gradle</p> <p>Cloud:Docker</p> <p>DataBases:MongoDB</p>"},{"location":"calistirma/","title":"Projeyi \u00c7al\u0131\u015ft\u0131rma","text":""},{"location":"calistirma/#sag-tkla-ve-calstr","title":"Sa\u011f T\u0131kla ve \u00c7al\u0131\u015ft\u0131r","text":""},{"location":"endpointler/","title":"EndPointler","text":"<p>Endpoint (u\u00e7 nokta), bir a\u011fda veya ileti\u015fim protokol\u00fcnde, hizmetin veya veriye eri\u015fimin ba\u015flad\u0131\u011f\u0131 belirli bir noktad\u0131r. Endpoint, bir hizmetin, cihaz\u0131n veya a\u011fa ba\u011fl\u0131 bir noktan\u0131n belirli bir adresini temsil eder.</p> <p></p>"},{"location":"endpointler/#company","title":"Company","text":"<p>\u2219 UPDATE COMPANY</p> <p>\u2219 SAVE COMPANY</p> <p>\u2219 FIND ALL COMPANY</p> <p>\u2219 DELETE COMPANY</p>"},{"location":"endpointler/#employee","title":"Employee","text":"<p>\u2219 UPDATE EMPLOYEE</p> <p>\u2219 SAVE EMPLOYEE</p> <p>\u2219 FIND BY COMPANY NAME AND EMPLOYEE NAME</p> <p>\u2219 FIND ALL EMPLOYEE</p> <p>\u2219 FIND ALL BY COMPANY ID</p> <p>\u2219 DELETE EMPLOYEE</p>"},{"location":"kodlama/","title":"Kodlama","text":""},{"location":"kodlama/#proje-mimarisi","title":"Proje Mimarisi","text":"<ul> <li>Bu proje monolitic mimariye uygun \u015fekilde tasarlanm\u0131\u015ft\u0131r. Katmanl\u0131 mimariye sad\u0131k kalmaya \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r.</li> </ul> <pre><code>com.keremturak\n\u251c\u2500\u2500 constant\n\u2502   \u251c\u2500\u2500 ApiUrls\n\u251c\u2500\u2500 controller\n\u2502   \u251c\u2500\u2500 CompanyController\n\u2502   \u251c\u2500\u2500 EmployeeController\n\u251c\u2500\u2500 dto\n\u2502   \u251c\u2500\u2500 request\n\u2502   \u251c\u2500\u2500 response\n\u251c\u2500\u2500 exception\n\u251c\u2500\u2500 mapper\n\u251c\u2500\u2500 repository\n\u2502   \u251c\u2500\u2500 entity\n\u2502   \u251c\u2500\u2500 enums\n\u251c\u2500\u2500 service\n\u251c\u2500\u2500 Application.java\n</code></pre>"},{"location":"kodlama/#entityler","title":"Entityler","text":""},{"location":"kodlama/#company","title":"Company","text":"<pre><code>@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@SuperBuilder\n@Document\npublic class Company{\n    @Id\n   private String id;\n    private String companyName;\n    private String companyPhone;\n    private String infoEmail;\n    private String city;\n}\n</code></pre>"},{"location":"kodlama/#employee","title":"Employee","text":"<pre><code>@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@SuperBuilder\n@Document\npublic class Employee{\n    @Id\n    private String id;\n    private String companyId;\n    private String firstName;\n    private String lastName;\n    @Builder.Default\n    private ERole role=ERole.EMPLOYEE;\n}\n</code></pre>"},{"location":"kodlama/#anotasyonlar","title":"Anotasyonlar","text":"<ul> <li>@Data</li> </ul> <p><code>@Data</code> annotation'\u0131 Lombok k\u00fct\u00fcphanesine aittir. <code>@Data</code> annotation'\u0131, bir s\u0131n\u0131f\u0131n temel veri i\u015fleme y\u00f6ntemlerini otomatik olarak olu\u015fturur, bu da getter, setter, toString, equals ve hashCode metodlar\u0131n\u0131 i\u00e7erir.</p> <ul> <li>@AllArgsConstructor</li> </ul> <p>Lombok k\u00fct\u00fcphanesine aittir ve bir s\u0131n\u0131f\u0131n t\u00fcm alanlar\u0131n\u0131 i\u00e7eren bir constructor (kurucu metod) olu\u015fturur. Bu, s\u0131n\u0131f\u0131n her bir alan\u0131n\u0131n de\u011ferini parametre olarak alarak nesne olu\u015fturmay\u0131 sa\u011flar.</p> <ul> <li>@NoArgsConstructor</li> </ul> <p>bir s\u0131n\u0131f\u0131n parametresiz bir constructor (kurucu metod) olu\u015fturur. Bu, s\u0131n\u0131f\u0131n hi\u00e7bir parametre almadan nesne olu\u015fturulmas\u0131n\u0131 sa\u011flar.</p> <ul> <li>@SuperBuilder</li> </ul> <p>Bu annotation, s\u0131n\u0131f\u0131n her alan\u0131n\u0131 i\u00e7eren bir builder s\u0131n\u0131f\u0131 olu\u015fturur. Bu builder s\u0131n\u0131f\u0131, nesnenin alanlar\u0131na tek tek de\u011fer atamak yerine, zincirleme y\u00f6ntemi \u00e7a\u011fr\u0131lar\u0131yla nesne olu\u015fturmay\u0131 sa\u011flar.</p> <ul> <li>@Document</li> </ul> <p>Spring Data MongoDB taraf\u0131ndan sa\u011flanan bir annotation'd\u0131r. Bu annotation, bir s\u0131n\u0131f\u0131n MongoDB veritaban\u0131nda bir dok\u00fcman olarak saklanmas\u0131 gerekti\u011fini belirtir.</p> <ul> <li>@Id</li> </ul> <p>@Id annotation'u, bir s\u0131n\u0131f\u0131n veya nesnenin benzersiz bir tan\u0131mlay\u0131c\u0131s\u0131n\u0131 belirtmek i\u00e7in kullan\u0131l\u0131r. Bu annotation, genellikle veritaban\u0131 i\u015flemlerinde kullan\u0131l\u0131r ve belirli bir nesnenin veritaban\u0131ndaki benzersiz kimli\u011fini temsil eder.</p>"},{"location":"kodlama/#dto","title":"Dto","text":"<p>DTO (Data Transfer Object), bir yaz\u0131l\u0131m uygulamas\u0131nda farkl\u0131 katmanlar aras\u0131nda veri iletimi veya payla\u015f\u0131m\u0131 i\u00e7in kullan\u0131lan bir tasar\u0131m desenidir. DTO'lar, verilerin bir katmandan di\u011ferine aktar\u0131lmas\u0131n\u0131 kolayla\u015ft\u0131r\u0131r ve veri ta\u015f\u0131ma i\u015flemlerini daha etkili hale getirir.</p> <p>DTO'lar\u0131n baz\u0131 temel ama\u00e7lar\u0131 \u015funlard\u0131r:</p> <p>Veri Transferi: DTO'lar, verinin bir katmandan di\u011ferine aktar\u0131lmas\u0131n\u0131 sa\u011flar. \u00d6zellikle, veritaban\u0131ndan al\u0131nan verinin i\u015f katman\u0131na veya sunum katman\u0131na ta\u015f\u0131nmas\u0131 i\u00e7in kullan\u0131l\u0131r.</p> <p>Veri Gizleme (Data Hiding): DTO'lar, sadece belirli verilerin veya alanlar\u0131n belirli bir katmana aktar\u0131lmas\u0131n\u0131 sa\u011flayarak veri gizlemeyi destekler. Bu sayede, gerekli olmayan veri alanlar\u0131 g\u00f6nderilmez.</p> <p>\u00d6rnek Dto;</p> <pre><code>@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\npublic class CompanySaveRequestDto {\n    @NotEmpty(message = \"Name field cannot be empty\")\n    private String companyName;\n    @NotEmpty(message = \"Name field cannot be empty\")\n    @Size(min = 3, max = 20, message = \"Name must be between 3 and 20 characters.\")\n    private String companyPhone;\n    @Email(message = \"Email must be valid\")\n    private String infoEmail;\n    @NotEmpty(message = \"City field cannot be empty\")\n    private String city;\n}\n</code></pre> <p><code>@NotEmty</code> bir alan\u0131n veya koleksiyonun bo\u015f olmamas\u0131n\u0131 belirtir.,<code>@Email</code> bir alan\u0131n ge\u00e7erli bir e-posta adresi olmas\u0131n\u0131 belirtir. Bu annotation, genellikle e-posta adreslerinin do\u011frulanmas\u0131 i\u00e7in kullan\u0131l\u0131r.</p>"},{"location":"kodlama/#controller","title":"Controller","text":"<p>Controller katman\u0131, kullan\u0131c\u0131 isteklerini al\u0131r, i\u015f mant\u0131\u011f\u0131n\u0131 ba\u015flat\u0131r, modeli g\u00fcnceller, uygun g\u00f6r\u00fcn\u00fcm\u00fc se\u00e7er ve sonucu istemciye g\u00f6nderir. Bu sayede uygulaman\u0131n farkl\u0131 bile\u015fenleri aras\u0131nda etkile\u015fim sa\u011flan\u0131r ve istemcinin talepleri kar\u015f\u0131lan\u0131r.</p>"},{"location":"kodlama/#companycontroller","title":"CompanyController","text":"<pre><code>@RestController\n@RequiredArgsConstructor\n@RequestMapping(COMPANY)\npublic class CompanyController {\n    private final CompanyService companyService;\n\n    @PostMapping (SAVE_COMPANY)\n    public ResponseEntity&lt;CompanySaveResponseDto&gt; save(@RequestBody @Valid CompanySaveRequestDto dto) {\n        return ResponseEntity.ok(companyService.save(dto));\n    }\n    @GetMapping (FIND_ALL_COMPANY)\n    public ResponseEntity&lt;List&lt;CompanyFindAllResponseDto&gt;&gt; findAll() {\n        return ResponseEntity.ok(companyService.findAll());\n    }\n    @PutMapping(UPDATE_COMPANY)\n    public ResponseEntity&lt;CompanyResponseDto&gt; updateCompany(@RequestBody CompanyUpdateRequestDto dto){\n        return ResponseEntity.ok(companyService.updateCompany(dto));\n    }\n    @DeleteMapping(DELETE_COMPANY + \"/{id}\")\n    public ResponseEntity&lt;String&gt; deleteCompany(@PathVariable String id){\n        return ResponseEntity.ok(companyService.deleteCompany(id));\n    }\n\n}\n</code></pre> <ul> <li>Neden @RestController ?</li> </ul> <p><code>@RestController</code> annotation'u, Spring Framework i\u00e7erisinde bir Java s\u0131n\u0131f\u0131n\u0131n bir RESTful web servisi olarak i\u015flev g\u00f6rmesini sa\u011flar. RESTful web servisler, HTTP protokol\u00fc \u00fczerinden eri\u015filen ve JSON veya XML gibi veri formatlar\u0131yla ileti\u015fim kuran servislerdir. </p> <ul> <li>@Valid</li> </ul> <p><code>@Valid</code> annotation'u, gelen iste\u011fin parametrelerini do\u011frulamak i\u00e7in kullan\u0131l\u0131r. E\u011fer gelen veriler belirli kriterlere uymuyorsa, hata mesajlar\u0131 olu\u015fturulabilir ve bu mesajlar istemciye d\u00f6nd\u00fcr\u00fclebilir.</p> <ul> <li>@RequestBody</li> </ul> <p><code>@RequestBody</code> annotation'u, bir HTTP iste\u011finin i\u00e7eri\u011fini almak i\u00e7in kullan\u0131l\u0131r. Genellikle JSON veya XML gibi formatlardaki verileri bir Java nesnesine d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131l\u0131r.</p> <ul> <li>@PathVariable</li> </ul> <p><code>@PathVariable</code> annotation'u, bir Spring MVC Controller metodunda URL'de bulunan bir de\u011fi\u015fkeni almak i\u00e7in kullan\u0131l\u0131r. Bu annotation, istemcinin g\u00f6nderdi\u011fi URL i\u00e7indeki de\u011fi\u015fken de\u011ferini bir metod parametresine ba\u011flar.</p> <ul> <li>Http Metotlar\u0131 w3schools</li> </ul>"},{"location":"kodlama/#service","title":"Service","text":"<p>Service katman\u0131, bir uygulaman\u0131n i\u015f mant\u0131\u011f\u0131n\u0131 ve i\u015f s\u00fcre\u00e7lerini y\u00f6neten katmand\u0131r. Bu katman, veri i\u015fleme, i\u015f kurallar\u0131 uygulama, d\u0131\u015f kaynaklarla etkile\u015fim ve di\u011fer i\u015flemleri ger\u00e7ekle\u015ftirir. Service katman\u0131, genellikle Controller ve Repository (veri taban\u0131 eri\u015fimi) katmanlar\u0131 aras\u0131nda yer al\u0131r.</p>"},{"location":"kodlama/#companyservice","title":"CompanyService","text":"<p><pre><code>@Service\npublic class CompanyService {\n    private final ICompanyRepository companyRepository;\n    private final EmployeeService employeeService;\n    CompanyService(ICompanyRepository companyRepository, EmployeeService employeeService) {\n        this.companyRepository = companyRepository;\n        this.employeeService = employeeService;\n    }\n    public CompanySaveResponseDto save(CompanySaveRequestDto dto) {\n        if (dto == null) {\n            throw new MyCompanyException(EErrorType.DTO_IS_NULL);\n        }\n        Company company = IMapper.INSTANCE.companyFromCompanySaveRequestDto(dto);\n        return IMapper.INSTANCE.companySaveResponseDtofromCompany(companyRepository.save(company));\n    }\n\n    public List&lt;CompanyFindAllResponseDto&gt;  findAll() {\n        List&lt;Company&gt; companies = companyRepository.findAll();\n        if (companies.isEmpty()){\n            throw new MyCompanyException(EErrorType.COMPANY_NOT_BE_FOUND);\n        }\n        List&lt;CompanyFindAllResponseDto&gt; companyList = new ArrayList&lt;&gt;();\n        companies.forEach(company -&gt; companyList.add(IMapper.INSTANCE.companyFindAllResponseDtofromCompany(company)));\n        return companyList;\n\n    }\n\n    public CompanyResponseDto updateCompany(CompanyUpdateRequestDto dto) {\n        if (dto == null) {\n            throw new MyCompanyException(EErrorType.DTO_IS_NULL);\n        }\n        Company company = Company.builder().companyName(dto.getCompanyName()).companyPhone(dto.getCompanyPhone()).id(dto.getId()).infoEmail(dto.getInfoEmail()).city(dto.getCity()).build();\n        companyRepository.save(company);\n        CompanyResponseDto responseDto = IMapper.INSTANCE.companyResponseDtofromCompany(company);\n        return responseDto;\n    }\n\n    public String deleteCompany(String id) {\n        Optional&lt;Company&gt; company = companyRepository.findById(id);\n        if (company.isEmpty()) {\n            throw new MyCompanyException(EErrorType.COMPANY_NOT_BE_FOUND);\n        }\n        employeeService.deleteAllByCompanyId(id);\n        companyRepository.deleteById(id);\n        return \"Company deleted\";\n    }\n}\n</code></pre> Burada <code>@Service</code> Anotasyonu kullan\u0131lm\u0131\u015ft\u0131r. bunun sebebi Spring Framework i\u00e7inde servis s\u0131n\u0131flar\u0131n\u0131 i\u015faretlemek i\u00e7in kullan\u0131l\u0131r. Bu anotasyon sayesinde spring arka planda bean olu\u015fturur. Ayr\u0131ca Constructor injection kullan\u0131lm\u0131\u015ft\u0131r. ba\u011f\u0131ml\u0131l\u0131klar\u0131n bir s\u0131n\u0131f\u0131n kurucu metodunda belirtilmesi ve bu ba\u011f\u0131ml\u0131l\u0131klar\u0131n s\u0131n\u0131f\u0131n i\u00e7indeki alanlara atanmas\u0131 anlam\u0131na gelir</p>"},{"location":"kodlama/#repository","title":"Repository","text":"<p>Repository katman\u0131, bir uygulaman\u0131n veritaban\u0131 i\u015flemlerini y\u00f6neten ve veri eri\u015fimini sa\u011flayan katmand\u0131r. Bu katman, veritaban\u0131 ile ileti\u015fim kurar, sorgular olu\u015fturur ve veri i\u015flemlerini ger\u00e7ekle\u015ftirir.</p>"},{"location":"kodlama/#companyrepository","title":"CompanyRepository","text":"<pre><code>@Repository\npublic interface ICompanyRepository extends MongoRepository&lt;Company, String&gt; {\n}\n</code></pre>"},{"location":"kodlama/#mapper","title":"Mapper","text":"<p>Mapper, genellikle farkl\u0131 veri yap\u0131lar\u0131 veya s\u0131n\u0131f tipleri aras\u0131nda d\u00f6n\u00fc\u015f\u00fcmler ger\u00e7ekle\u015ftiren bir bile\u015fendir. Bu d\u00f6n\u00fc\u015f\u00fcmler, bir nesnenin verilerini ba\u015fka bir nesnenin veri yap\u0131s\u0131na veya ba\u015fka bir s\u0131n\u0131f tipine d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131l\u0131r.</p> <pre><code>@Mapper(componentModel = \"string\", unmappedTargetPolicy = ReportingPolicy.IGNORE)\n\npublic interface IMapper {\n\n    IMapper INSTANCE = Mappers.getMapper(IMapper.class);\n\n    Company companyFromCompanySaveRequestDto(final CompanySaveRequestDto dto);\n</code></pre>"},{"location":"kodlama/#exception","title":"Exception","text":"<p>\u00d6zetlemek gerekirse, kendi \u00f6zel istisna s\u0131n\u0131f\u0131n\u0131z\u0131 olu\u015fturmak, hata y\u00f6netimi ve sorun giderme s\u00fcrecini geli\u015ftirebilir. Ayr\u0131ca, uygulaman\u0131z\u0131n ihtiya\u00e7lar\u0131na daha iyi uyum sa\u011flayabilir ve kodunuzu daha okunabilir hale getirebilirsiniz.</p> <pre><code>@AllArgsConstructor\n@NoArgsConstructor\n@Getter\npublic enum EErrorType {\n\n    INTERNAL_ERROR(3000,\"Unexpected error on server\",INTERNAL_SERVER_ERROR),\n    INVALID_TOKEN(4001,\"Invalid token information\",BAD_REQUEST),\n    BAD_REQUEST_ERROR(1202,\"You have entered an invalid parameter\",BAD_REQUEST),\n\n    COMPANY_NOT_BE_FOUND(2302,\"The company you were looking for could not be found\",BAD_REQUEST),\n    EMPLOYEE_NOT_BE_FOUND(2303,\"The employee you were looking for could not be found\",BAD_REQUEST),\n    EMPLOYEE_NAME_NOT_FOUND(2303,\"The employee name you were looking for could not be found\",BAD_REQUEST),\n    DTO_IS_NULL(2303,\"The DTO you were looking for could not be found\",BAD_REQUEST),\n    USER_NOT_IN_COMPANY(2307,\"The user you were looking for could not be found that company\",BAD_REQUEST);\n    private int code;\n    private String message;\n    private HttpStatus httpStatus;\n}\n</code></pre>"}]}